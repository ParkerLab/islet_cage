import pandas
import numpy
import itertools
import os
import sys
import math

DIR = config['results']
my_email = config['email']

workdir: DIR

LINK_DIR = os.path.join(DIR, "files")
BROWSER_DIR = os.path.join(DIR, "vs_files")
TISSUES = config['tissues']
         
rule all:
    input:
        db = os.path.join(BROWSER_DIR, "trackdb.txt"),
        fantom_tc_bb = expand(os.path.join(BROWSER_DIR, '{type}', '{tissue}.bb'),
                              type = ['fantom_tcs'],
                              tissue = ['fantom_tcs']),
        bb = expand(os.path.join(BROWSER_DIR, '{type}', '{tissue}.bb'),
                    type = ['atac_peaks', 'histone_chromatin_states', 'tcs'],
                    tissue = TISSUES),
        bw = expand(os.path.join(BROWSER_DIR, 'atac_seq', '{tissue}.bw'),
                    tissue = TISSUES),
        liver_states = expand(os.path.join(BROWSER_DIR, '{type}', '{tissue}.bb'),
                              type = ['histone_chromatin_states'],
                              tissue = "Liver")

        
def get_bed_file(wildcards):
    return config[wildcards.type]

rule bed_to_big_bed:
    input:
        bed = get_bed_file,
        chromsizes = config['chromsizes'],
    output:
        tempf = temp(os.path.join(BROWSER_DIR, '{type}', '{tissue}.sorted.bed')),
        bb = os.path.join(BROWSER_DIR, '{type}', '{tissue}.bb')
    shell:
        """
        sort -k1,1 -k2,2n {input.bed} > {output.tempf} ;
        bedToBigBed {output.tempf} {input.chromsizes} {output.bb}
        """

def get_atac_seq(wildcards):
    subsample_depth = config['subsamplings'][wildcards.tissue]

    return {'bam' : config['atac_bam'].format(subsample = subsample_depth,
                                              tissue = wildcards.tissue),
            'bg' : config['atac_bedgraph'].format(subsample = subsample_depth,
                                              tissue = wildcards.tissue),
            }
        
rule atac_seq_track:
    """Normalize bedgraphs and get bigwigs """
    input:
        unpack(get_atac_seq),
        chromsizes = config['chromsizes']
    output:
        bgnorm = os.path.join(BROWSER_DIR, 'atac_seq', '{tissue}.normalized.bg'),
        bw = os.path.join(BROWSER_DIR, 'atac_seq', '{tissue}.bw')
    log:
        os.path.join(BROWSER_DIR, 'logs', 'atac_seq', '{tissue}.log')
    shell:
        r"""
        ntags=`samtools flagstat {input.bam} | grep "in total" | cut -f1` ;
        less {input.bg} | awk '{{$4=$4*10000000/"'"$ntags"'"; print $1,$2,$3,$4}}' OFS='\t' | 
        sort -k1,1 -k2,2n  > {output.bgnorm} ;
        bedGraphToBigWig {output.bgnorm} {input.chromsizes} {output.bw} ;
        """

rule make_fantom_tc_track:
    """Make one track with all FANTOM TCs """
    input:
        tcs = expand(config['fantom_tissue_tcs'], fantom_tissue = eval(config['fantom_tissues']))
    output:
        tcs = config['fantom_tcs']
    run:
        def fixdf(f):
            name = os.path.basename(f).replace("tc_paraclu.", "").replace(".tpmThresh2singletonThresh2.bed","")
            d = pandas.read_csv(f, sep='\t', header=None, names = ['chrom','start','end','name','score','strand'])
            d['name'] = name
            return d

        df = pandas.concat([fixdf(f) for f in input.tcs], ignore_index=True)
        df['start'] = df['start'].astype(int)
        df['score'] = 0
        df.to_csv(output.tcs, sep='\t', header=False, index=False)

        
rule make_trackdb:
    input:
        bb = expand(os.path.join(BROWSER_DIR, '{type}', '{tissue}.bb'),
                    type = ['atac_peaks', 'histone_chromatin_states', 'tcs'],
                    tissue = TISSUES),
        bw = expand(os.path.join(BROWSER_DIR, 'atac_seq', '{tissue}.bw'),
                    tissue = TISSUES)
    output:
        db = os.path.join(BROWSER_DIR, "trackdb.txt")
        # hub = os.path.join(BROWSER_DIR, "hub.txt")
    params:
        urlstem = "https://theparkerlab.med.umich.edu/gb/custom-tracks/"
    run:
        sys.path.append("/home/arushiv/toolScripts/")
        def geturl(x):
            return os.path.join(params.urlstem, x)
        
        from make_trackdb import pstanza

        
        pstanza(output.db, level=0, track="Islets",
                **{'shortLabel':'Islet data',
                 'longLabel' :'Islet CAGE, TCs, ATAC-seq, peaks and RNA-seq',
                 'superTrack' : 'on show',
                 'priority' : 1})

        pstanza(output.db, level=1, track="Islet-CAGE",
                **{'shortLabel':'Islet CAGE',
                 'longLabel' :'Islet CAGE data',
                 'parent' : "Islets",
                 'container': "multiWig",
                 'visibility': "full",
                 'type': "bigWig",
                 'maxHeightPixels' : "100:100:16",
                 'aggregate': "transparentOverlay",
                 'priority' : 1.1})

        pstanza(output.db, level=2, track="Islet-CAGE-fwd",
                **{'type': 'bigWig',
                'bigDataUrl': geturl("2019-01-02-ATAC-comparisons/atac-comparisons/islet.fwd.bw"),
                'parent': 'Islet-CAGE',
                'color': '85,149,212',})

        
        pstanza(output.db, level=2, track="Islet-CAGE-rev",
                **{'type': 'bigWig',
                'bigDataUrl': geturl("2019-01-02-ATAC-comparisons/atac-comparisons/islet.rev.bw"),
                'parent': 'Islet-CAGE',
                'color': '85,149,212',
                'altColor': '85,85,212'})
                                       
        pstanza(output.db, level=1, track="Islet-CAGE-TCs",
                **{'shortLabel':'Islet TCs',
                 'longLabel' :'Islet CAGE tag clusters',
                 'parent' : "Islets",
                 'visibility': "dense",
                 'itemRgb' : 'on',
                 'type': "bigBed 6 +.",
                 'bigDataUrl': geturl("2019_CAGE/tcs/Islets.bb"),
                 'priority' : 1.2})
        
        pstanza(output.db, level=1, track="Islet-ATACseq",
                **{'shortLabel':'Islet ATACseq',
                 'longLabel' :'Islet ATAC seq track',
                 'parent' : "Islets",
                 'visibility': "full",
                 'color': "255,128,0",
                 'maxHeightPixels': "50:50:50",
                 'windowingFunction': 'mean',
                 'smoothingWindow': 3,
                 'type': "bigWig",
                 'bigDataUrl':geturl("2019_CAGE/atac_seq/Islets.bw"),
                 'priority' : 1.3})
                                                                      
        pstanza(output.db, level=1, track="Islet-ATAC-peaks",
                **{'shortLabel':'Islet ATAC-peaks',
                 'longLabel' :'Islet ATAC-seq broad peaks (1% FDR)',
                 'parent' : "Islets",
                 'visibility': "dense",
                 'type': "bigBed",
                 'bigDataUrl':geturl("2019_CAGE/atac_peaks/Islets.bb"),
                 'priority' : 1.4})

        pstanza(output.db, level=1, track="Islet-states",
                **{'shortLabel':'Islet states',
                 'longLabel' :'Islet chromatin states',
                 'parent' : "Islets",
                 'visibility': "dense",
                 'itemRgb' : 'on',
                 'type': "bigBed 9 +.",
                 'bigDataUrl':geturl("2019_CAGE/histone_chromatin_states/Islets.bb"),
                 'priority' : 1.5})
        

        pstanza(output.db, level=1, track="Islet-RNAseq",
                **{'shortLabel':'Islet RNA-seq',
                 'longLabel' :'Islet RNA-seq track',
                 'parent' : "Islets",
                 'container': "multiWig",
                 'visibility': "full",
                 'type': "bigWig -10 10",
                 'maxHeightPixels' : "100:100:16",
                 'aggregate': "transparentOverlay",
                 'priority' : 1.6})

        pstanza(output.db, level=2, track="Islet-RNA-fwd",
                **{'type': 'bigWig',
                'bigDataUrl': geturl('test/track_hub/VDH041_depth.Win2.fwd.bw'),
                'parent': 'Islet-RNAseq',
                'color': '85,149,212',})

        
        pstanza(output.db, level=2, track="Islet-RNA-rev",
                **{'type': 'bigWig',
                'bigDataUrl': geturl('test/track_hub/VDH041_depth.Win2.rev.bw'),
                'parent': 'Islet-RNAseq',
                'color': '85,149,212',
                'altColor': '85,85,212'})
        
##
# notification
##

onerror:
    print("Error: Snakemake aborted!")
    shell(
        ("mail -s 'Snakemake browser session error' "
         "{my_email} < {log}")
    )

    
onsuccess:
    print("Success: Snakemake completed!")
    shell(
        ("mail -s 'Snakemake browser session Completed' "
         "{my_email} < {log}")
    )
