import os
import pandas
import numpy

DIR = config['results']
workdir: DIR
         
GAT_output_figure = os.path.join(DIR, "figures", config['DATA']['fig_output'])
GAT_OUTPUT_DIR = os.path.join(DIR, 'gatResults')
LOG_DIR = os.path.join(DIR, 'gatLogs')
COUNTS_DIR = os.path.join(DIR, 'gatCountsIntermediate')

count_output = config['DATA']['count_output']
count_file = os.path.join(COUNTS_DIR, count_output)

PARAMETERS = config['PARAMETERS']
ANNOTATIONS = eval(PARAMETERS['ANNOTATIONS'])
SEGMENTS = eval(PARAMETERS['SEGMENTS'])
assert len(ANNOTATIONS) > 0 and len(SEGMENTS) > 0

rule all_GAT:
    """
    Workflow to compute overlap enrichment between two sets of genomic features
    """
    input:
        os.path.join(DIR, "results_GAT.dat")

rule runGAT:
    """
    Run GAT. Segment files are merged by default, if all segment files only have 3 columns, 
    use flag --with-segment-tracks so that the original filename is stored in the output instead of "merged"
    IMP - do not use --with-segment-tracks flag if segment files contain 4 columns and they don't have to be treated as separate
    """
    input:
        annot = ancient(config['DATA']['annotation']),
        segment = config['DATA']['segment'],
        workspace = config['DATA']['workspace']
    output:
        full = temp(os.path.join(GAT_OUTPUT_DIR, config['DATA']['output']))
    params:
        num_samples = PARAMETERS['num_samples'],
        counts = f" --output-counts-pattern {count_file} " if count_output != "" else "",
        countsdir = f" mkdir -p {COUNTS_DIR} ; " if count_output != "" else "",
    log:
        os.path.join(LOG_DIR, config['DATA']['log'])
    shell:
        ' {params.countsdir} '
        ' ionice -c2 -n7 gat-run.py '
        ' -a {input.annot} '
        ' -s {input.segment} '
        ' -w {input.workspace} '
        ' --stdout {output.full} '
        ' --log {log} '
        ' {params.counts} '
        ' --num-samples {params.num_samples} '
        # ' --nbuckets 105000 '

def get_extra_params():
    if PARAMETERS['split_delimiter'] != "" and PARAMETERS['colnames'] != "":
        cmd = f" --split {PARAMETERS['split_delimiter']} --infosplit {PARAMETERS['colnames']}"
    else:
        cmd = ""
    return cmd

rule compileResults:
    input:
        results = expand(rules.runGAT.output.full, annotation = ANNOTATIONS, segment = SEGMENTS) 
    output:
        os.path.join(DIR, "results_GAT.dat")
    params:
        script = config['SCRIPTS']['compileResults'],
        filenameString = PARAMETERS['filenameString'],
        directory = GAT_OUTPUT_DIR,
        extra = get_extra_params()
    shell:
        """
        python {params.script} {output} -s {params.filenameString} -d {params.directory} {params.extra}
        """
        
rule plotEnrichment:
    input:
        rules.compileResults.output
    output:
        GAT_output_figure
    params:
        script = config['SCRIPTS']['plot']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
    
onsuccess:
    shell("""mail -s "GAT finished" {config[email]} < {log}""")

onerror:
    print("An error occurred")
    shell("""mail -s "an error occurred in GAT workflow" {config[email]} < {log}""")
